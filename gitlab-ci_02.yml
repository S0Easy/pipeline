default:
  before_script:
    - |
      echo "pull your workspace"
      echo "****************$CI_COMMIT_TAG"
      echo "****************$CI_COMMIT_BRANCH"
      echo "****************$CI_COMMIT_REF_NAME"
      echo "****************CI_SERVER_HOST: $CI_SERVER_HOST"
      echo "****************CI_SERVER_NAME: $CI_SERVER_NAME"
      echo "****************CI_SERVER: $CI_SERVER" 
      echo "****************GITLAB_CI: $GITLAB_CI"
      echo "****************GITLAB_FEATURES: $GITLAB_FEATURES"
      echo "****************GITLAB_USER_ID: $GITLAB_USER_ID"
      echo "****************GITLAB_USER_LOGIN: $GITLAB_USER_LOGIN"
      echo "****************GITLAB_USER_NAME: $GITLAB_USER_NAME"
  tags:
    - nbpm

stages:
  - test
  - prod            # 名称可自定义

#linux_job:
#  when: manual
#  allow_failure: false
#  script:
#    - echo "测试linux runner"
#  tags:
#    - linux_test
#  after_script:
#    - | 
#      echo "code to "$dir" end"
#  except:
#    - master
    


win_job1:
  stage: test
#  rules:
#    - if: $CI_COMMIT_REF_NAME == "master"

  variables:
    dir: "D:\\你的项目目录"
    project_addr: "git@10.10.10.31:java-g1/workspace.git"
    cbrancher: "$(git rev-parse --abbrev-ref HEAD)"       # 获取本地分支名称
  
  when: manual

  allow_failure: false                              # 失败之后管道不执行
  script:
    - |
      if ($cbrancher -eq "dev") {
        echo "pull new version"
        echo "update brancher "$cbrancher" "

      }
      else {
        echo "Current Branch is $(git rev-parse --abbrev-ref HEAD)"
        echo "--------------- no update ---------------"
      }
  only:                                           #用户是java, 分支是master 管道执行
    refs:
      - master                                    # 只有当分支是master时， 作业执行
    variables:
      - $GITLAB_USER_LOGIN == "java"              #启动作业用户名是java时， 运行 win_job1: 
  
win_job2:
  stage: prod
  script:
    - echo "**************prod**************"
